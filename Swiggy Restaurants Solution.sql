SELECT * FROM restaurants;
SELECT * FROM menu_items;
SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM order_items;

select * from restaurants

select * from orders

Q1 Find the total revenue generated by each restaurant.

select name, sum(total_amount) as total_revenue
from restaurants as r
join orders as o
on r.restaurant_id = o.restaurant_id
group by name
order by total_revenue desc

Q2 Find the total quantity of each menu item ordered.

SELECT * FROM menu_items;

SELECT * FROM order_items;


select item_name, sum(quantity) as total_quantity
from menu_items as m
join order_items as o
on m.item_id = o.item_id
group by item_name
order by total_quantity desc

Q3 Write a query to find the total number of orders placed by each customer. Show customer name and total orders.

SELECT * FROM customers;
SELECT * FROM orders;

select name, count(*) as total_orders
from customers as c
join orders as o
on c.customer_id = o.customer_id
group by name
order by total_orders desc

Q4 Which city has the highest total revenue generated by all restaurants combined?

SELECT * FROM restaurants;
SELECT * FROM orders;

select city, sum(total_amount) as total_revenue
from restaurants as r
join orders as o
on r.restaurant_id = o.restaurant_id
group by city
order by total_revenue desc

Q5 What are the top 3 most frequently ordered items?

select item_name, sum(quantity) as order_item
from menu_items as m
join order_items as o
on m.item_id = o.item_id
group by item_name
order by order_item desc
limit 3

Q6 Find the average order value (average total_amount per order) for each customer and display the results in descending order of average order value, 
   so that we can see who spends the most on average.

select name, avg(total_amount) as total_avg
from customers as c
join orders as o
on c.customer_id = o.customer_id
group by name
order by total_avg desc

Q7 Find the total revenue generated by each restaurant and show the restaurant name along with the total revenue.
   Sort the results so the restaurant with the highest revenue appears first.

select name, sum(total_amount) as total_revenue
from restaurants as r
join orders as o
on r.restaurant_id = o.restaurant_id
group by name
order by total_revenue desc
   
Q8 Window Function Question:
  
Find each customer s total spending on orders but also show the running total (cumulative sum) of their spending sorted by customer_id.

SELECT
  c.customer_id,
  c.name,
  SUM(o.total_amount) OVER (PARTITION BY c.customer_id ORDER BY o.order_id) AS running_total
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
ORDER BY c.customer_id, o.order_id;

Q9 CTE Question:
Write a query to find the average order amount per restaurant, but use a CTE (Common Table Expression) to first calculate total order amounts per restaurant.

WITH restaurant_order_totals AS (
  SELECT
    restaurant_id,
    AVG(total_amount) AS avg_order_amount
  FROM orders
  GROUP BY restaurant_id
)
SELECT
  r.name,
  rot.avg_order_amount
FROM restaurants r
JOIN restaurant_order_totals rot ON r.restaurant_id = rot.restaurant_id
ORDER BY rot.avg_order_amount DESC;

-- Q10 Write a SQL query to display each customer's total amount spent on orders and their rank based on total amount spent (highest spender gets rank 1).

select c.customer_id,  c.name,
sum(o.total_amount) as total_spent,
rank() over (order by sum(o.total_amount) desc) as highest_rank
from customers as c
join orders as o
on c.customer_id = o.customer_id
group by c.customer_id, c.name
order by highest_rank

-- Q11 Write a query to show each customer's total amount spent along with a running total of spending, ordered by total spent (highest first).

select c.customer_id, o.order_id, c.name,
sum(o.total_amount) over (partition by c.customer_id order by o.order_id desc) as running_total
from customers as c
join orders as o
on c.customer_id = o.customer_id

-- Q12 Write an SQL query to find the average total amount spent by each customer on their orders using a window function. The result should include

select c.customer_id, c.name,
avg(o.total_amount) over (partition by c.customer_id) as total_avg
from customers as c
join orders as o
on c.customer_id = o.customer_id

-- Q13 Show each order with the total amount and the average total amount for all orders made by that customer.

select c.customer_id, o.total_amount,
avg(o.total_amount) over (partition by c.customer_id) as total_avg
from customers as c
join orders as o
on c.customer_id = o.customer_id

-- Q14 Find all customers who placed orders worth more than â‚¹400 using a CTE.

with highrated_restaurant as (
select name, city, rating
from restaurants
where rating >= 4.1
)
select * from highrated_restaurant

-- ðŸ“š Q15 Average Price Per Category
--   Using CTE, calculate the average price of menu items for each category (like Pizza, Burger, etc.) and list the category with its average price.

with total_avg as (
select category, avg(price) as avg_price
from menu_items
group by category
)
select * from total_avg
order by avg_price desc

-- 	q	16 ðŸ“š Q3: Customers in Delhi
-- Use CTE to create a list of customers who live in Delhi. Select their name and phone.

with live_customer as (
select name, phone, city
from customers
where city = 'Delhi'
)
select * from live_customer

-- Q17 âœ… Write a query to display each customer's total number of orders and assign a row number for each customer 
--        based on the order of total orders (most orders first).

select customer_id, total_spent,
rank() over (order by total_spent desc) as total_number
from(
  select customer_id, sum(total_amount) as total_spent
  from orders
  group by customer_id
) as customer_totals
order by total_number

-- second method using cte function

with customer_total as (
select customer_id, sum(total_amount) as total_spent
from orders
group by customer_id
)
select customer_id, total_spent,
rank() over (order by total_spent desc) as total_number
from customer_total
order by total_number